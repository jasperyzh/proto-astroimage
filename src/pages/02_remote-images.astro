---
import BaseLayout from '../layouts/BaseLayout.astro';
import { Image } from 'astro:assets';

// Replace with a real remote image URL from an authorized domain (e.g., Unsplash)
const authorizedRemoteImageUrl = "https://images.unsplash.com/photo-1746311503228-893ff1507b75?q=80&w=2670&auto=format&fit=crop&ixlib=rb-4.1.0&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D";

// Replace with a real remote image URL from an unauthorized domain
const unauthorizedRemoteImageUrl = "https://picsum.photos/id/237/800/600"; // Example: picsum.photos is NOT authorized by default
---
<BaseLayout title="Remote Images (Optimized vs. Unoptimized)">
  <p class="intro">
    This page demonstrates how Astro handles remote images differently based on whether their domains are authorized in <code>astro.config.mjs</code>. This is both a performance feature and a security measure.
  </p>

  <h2>Optimized Remote Images (Authorized Domain) <span class="feature-badge">Secure</span></h2>
  <p>For Astro to optimize remote images, their domain must be listed in <code>astro.config.mjs</code> under <code>image.domains</code> or match a <code>image.remotePatterns</code> entry.</p>

  <div class="image-container">
    <span class="image-label">Optimized Image from authorized domain (images.unsplash.com):</span>
    <Image src={authorizedRemoteImageUrl} alt="A beautiful authorized remote landscape" width={500} height={600} />
    <pre><code>{`// In astro.config.mjs:
export default defineConfig({
  image: { 
    domains: ["images.unsplash.com"] 
  }
})

// In component:
<Image 
  src={authorizedRemoteImageUrl} 
  alt="A beautiful authorized remote landscape" 
  width={800} 
  height={600} 
/>`}</code></pre>
    <p class="note success">✅ This image gets optimized because images.unsplash.com is in our authorized domains</p>
  </div>

  <h2>Unoptimized Remote Images (Unauthorized Domain) <span class="feature-badge">Security</span></h2>
  <p>If the domain is not authorized, Astro's <code>Image</code> component will still render an <code>img</code> tag and prevent CLS (if it can infer dimensions), but no image *optimization* will occur. This is a security feature to prevent unauthorized external image processing.</p>

  <div class="image-container">
    <span class="image-label">Unoptimized Image from unauthorized domain (picsum.photos):</span>
    <Image src={unauthorizedRemoteImageUrl} alt="An unauthorized remote image of a dog" width={800} height={600} />
    <pre><code>{`// Domain NOT in astro.config.mjs image.domains
<Image 
  src={unauthorizedRemoteImageUrl} 
  alt="An unauthorized remote image of a dog" 
  width={800} 
  height={600} 
/>`}</code></pre>
    <p class="note warning">❌ No optimization occurs because picsum.photos is not in our authorized domains</p>
  </div>

  <div class="image-container">
    <span class="image-label">Raw HTML img for remote image (always unoptimized):</span>
    <img src={unauthorizedRemoteImageUrl} alt="A raw HTML remote image of a dog" width={800} height={600} loading="lazy" />
    <pre><code>{`<img 
  src={unauthorizedRemoteImageUrl} 
  alt="A raw HTML remote image of a dog" 
  width={800} 
  height={600} 
  loading="lazy" 
/>`}</code></pre>
    <p class="note warning">❌ Standard HTML img tags never get optimized regardless of domain</p>
  </div>

  <h2>Security Considerations <span class="feature-badge">Important</span></h2>
  <div class="security-info">
    <h3>Why Domain Authorization Matters:</h3>
    <ul>
      <li><strong>Performance Control:</strong> Only optimize images from trusted sources</li>
      <li><strong>Bandwidth Protection:</strong> Prevent your server from processing arbitrary external images</li>
      <li><strong>Security:</strong> Avoid potential security issues from processing untrusted image data</li>
      <li><strong>Reliability:</strong> Ensure external image sources are stable and available</li>
    </ul>
  </div>

  <h2>Configuration Options</h2>
  <div class="config-examples">
    <div class="config-option">
      <h3>Using <code>domains</code></h3>
      <pre><code>{`// astro.config.mjs
export default defineConfig({
  image: {
    domains: ["images.unsplash.com", "cdn.example.com"]
  }
})`}</code></pre>
      <p>Simple list of exact domain names to authorize.</p>
    </div>

    <div class="config-option">
      <h3>Using <code>remotePatterns</code></h3>
      <pre><code>{`// astro.config.mjs
export default defineConfig({
  image: {
    remotePatterns: [
      { protocol: "https", hostname: "**.unsplash.com" },
      { protocol: "https", hostname: "cdn.example.com", pathname: "/images/**" }
    ]
  }
})`}</code></pre>
      <p>More flexible pattern matching for subdomains and paths.</p>
    </div>
  </div>

  <style>
    .intro {
      background-color: #dbeafe;
      border: 1px solid #93c5fd;
      border-radius: 8px;
      padding: 1rem;
      margin-bottom: 2rem;
      color: #1e40af;
    }
    .note {
      font-size: 0.875rem;
      margin: 0.75rem 0 0 0;
      padding: 0.5rem;
      border-radius: 4px;
      font-weight: 500;
    }
    .note.success {
      background-color: #dcfce7;
      color: #166534;
    }
    .note.warning {
      background-color: #fef2f2;
      color: #dc2626;
    }
    .security-info {
      background-color: #fefce8;
      border: 1px solid #fde047;
      border-radius: 8px;
      padding: 1.5rem;
      margin: 2rem 0;
    }
    .security-info h3 {
      margin-top: 0;
      color: #a16207;
    }
    .security-info ul {
      list-style: disc;
      padding-left: 1.5rem;
    }
    .security-info li {
      color: #a16207;
      margin-bottom: 0.5rem;
    }
    .config-examples {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
      gap: 1.5rem;
      margin: 2rem 0;
    }
    .config-option {
      border: 1px solid #e2e8f0;
      border-radius: 8px;
      padding: 1.5rem;
      background-color: #f8fafc;
    }
    .config-option h3 {
      margin-top: 0;
      color: #475569;
    }
    .config-option p {
      color: #64748b;
      font-size: 0.9375rem;
    }
  </style>
</BaseLayout> 